generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        BigInt?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String              @id @default(cuid())
  name                 String?
  email                String?             @unique
  password             String?
  totalEarnings        Float               @default(0)
  emailVerified        DateTime?
  image                String?
  role                 String?
  stripeCustomerId     String?
  stripeAccountId      String?
  stripeAccountStatus  String?             @default("pending")
  stripeSubscriptionId String?
  spotifyState         String?
  spotifyProfile       String?
  spotifyTokens        Json?
  acceptanceRate       Float?              @default(0)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  increment            BigInt              @default(0)
  genres               String[]
  campaignCount        Int                 @default(0)
  totalSpend           Float               @default(0)
  accounts             Account[]
  campaigns            Campaign[]
  earnings             CuratorEarnings[]
  notifications        Notification[]
  playlists            Playlist[]
  sessions             Session[]
  tracks               Track[]
  submissions          TrackSubmission[]
  verificationTokens   VerificationToken[]
}

model Campaign {
  id           String          @id @default(cuid())
  title        String
  description  String?
  status       String          @default("pending")
  budget       Float
  spent        Float           @default(0)
  targetRegion String?
  startDate    DateTime
  endDate      DateTime
  userId       String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  user         User            @relation(fields: [userId], references: [id])
  tracks       CampaignTrack[]
}

model CampaignTrack {
  id         String   @id @default(cuid())
  campaignId String
  trackId    String
  status     String   @default("pending")
  addedAt    DateTime @default(now())
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  track      Track    @relation(fields: [trackId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  metadata  Json?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Track {
  id               String              @id @default(cuid())
  title            String
  artist           String
  genre            String
  description      String?
  spotifyUrl       String
  status           String              @default("pending")
  userId           String
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  totalSubmissions BigInt              @default(0)
  saves            BigInt              @default(0)
  shares           BigInt              @default(0)
  comments         BigInt              @default(0)
  followerGrowth   BigInt              @default(0)
  streamGrowth     BigInt              @default(0)
  campaigns        CampaignTrack[]
  earnings         CuratorEarnings[]
  playlists        PlaylistTrack[]
  user             User                @relation(fields: [userId], references: [id])
  audioFeatures    TrackAudioFeatures?
  submissions      TrackSubmission[]
}

model TrackAudioFeatures {
  id               String @id @default(cuid())
  trackId          String @unique
  danceability     Float
  energy           Float
  key              BigInt
  loudness         Float
  mode             BigInt
  speechiness      Float
  acousticness     Float
  instrumentalness Float
  liveness         Float
  valence          Float
  tempo            Float
  track            Track  @relation(fields: [trackId], references: [id])
}

model Playlist {
  id                 String          @id @default(cuid())
  name               String
  spotifyId          String          @unique
  genre              String
  subGenres          String[]
  followers          BigInt          @default(0)
  curatorId          String
  averageFeatures    Json?
  avgEnergy          Float?
  avgDanceability    Float?
  avgValence         Float?
  avgTempoNormalized Float?
  curator            User            @relation(fields: [curatorId], references: [id])
  tracks             PlaylistTrack[]
}

model PlaylistTrack {
  id           String   @id @default(cuid())
  playlistId   String
  trackId      String
  addedAt      DateTime @default(now())
  matchScore   Float?
  matchReasons String[]
  playlist     Playlist @relation(fields: [playlistId], references: [id])
  track        Track    @relation(fields: [trackId], references: [id])
}

model CuratorEarnings {
  id           String   @id @default(cuid())
  curatorId    String
  trackId      String
  submissionId String?
  amount       Float
  status       String   @default("pending")
  paidOut      Boolean  @default(false)
  transferId   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  curator      User     @relation(fields: [curatorId], references: [id])
  track        Track    @relation(fields: [trackId], references: [id])
}

model TrackSubmission {
  id         String    @id @default(cuid())
  trackId    String
  curatorId  String
  status     String    @default("pending")
  feedback   String?
  reviewedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  curator    User      @relation(fields: [curatorId], references: [id])
  track      Track     @relation(fields: [trackId], references: [id])
}

model VerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expires   DateTime
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
